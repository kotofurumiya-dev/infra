name: _Shared Terraform Plan

on:
  workflow_call:
    inputs:
      env_name:
        required: true
        type: string
      google_cloud_project_id:
        required: true
        type: string
      google_cloud_region:
        required: true
        type: string
      google_cloud_workload_identity_provider:
        required: true
        type: string
      google_cloud_service_account:
        required: true
        type: string
    secrets:
      TERRAFORM_CLOUD_API_TOKEN:
        required: true

jobs:
  plan:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      id-token: write
      issues: write
      pull-requests: write

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Auth Workload Identity
      uses: 'google-github-actions/auth@v0'
      with:
        workload_identity_provider: ${{ inputs.google_cloud_workload_identity_provider }}
        service_account: ${{ inputs.google_cloud_service_account }}

    - uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_API_TOKEN }}

    - name: terraform format
      working-directory: terraform/environments/${{ inputs.env_name }}
      run: terraform fmt -check

    - name: terraform init
      working-directory: terraform/environments/${{ inputs.env_name }}
      run: terraform init -input=false

    - name: terraform validate
      working-directory: terraform/environments/${{ inputs.env_name }}
      run: terraform validate -no-color
    
    - name: terraform plan
      id: plan
      working-directory: terraform/environments/${{ inputs.env_name }}
      run: |
        terraform plan -input=false -no-color -out=tfplan \
        && terraform show -no-color tfplan

    - name: format plan result
      id: format_result
      run: |
        echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt
        PLAN=$(cat plan.txt)
        echo "PLAN<<EOF" >> $GITHUB_ENV
        echo "$PLAN" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Comment Pull Request
      uses: actions/github-script@v5
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ env.PLAN }}"
      with:
        script: |
          const output = `## Terraform Plan
          <details><summary>Show Plan</summary>

          \`\`\`diff\n
          ${process.env.PLAN}
          \`\`\`
          </details>`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })